import {
  BackgroundImage,
  Box,
  Button,
  Center,
  Container,
  Group,
  rem,
  SimpleGrid,
  Skeleton,
  Stack,
  Text,
  TextInput,
  ThemeIcon,
  Title,
  useMantineTheme
} from '@mantine/core';
import React, {useEffect, useState} from 'react';
import {Card} from '../components';
import Layout from '../layout';
import {IPost} from "../types";
import {IconDownload, IconMoodEmpty, IconSearch} from "@tabler/icons-react";
import {Helmet} from "react-helmet";
import {Carousel} from '@mantine/carousel';
import {downloadImage} from "../utils";

export const RenderCards = ({data, title}: { data?: IPost[], title: string }): any => {
  if (data?.length && data) {
    return <SimpleGrid cols={3} spacing="lg">
      {data.map((d) => <Card key={d._id} data={d}/>)}
    </SimpleGrid>
  }

  return <Stack align="center" py={60}>
    <ThemeIcon size={148} variant="light" color="gray">
      <IconMoodEmpty size={84}/>
    </ThemeIcon>
    <Title order={4}>{title}</Title>
  </Stack>
}

const Home = () => {
  const theme = useMantineTheme();
  const [loading, setLoading] = useState(false);
  const [allPosts, setAllPosts] = useState<IPost[]>();
  const [searchText, setSearchText] = useState('');
  const [searchedResults, setSearchedResults] = useState<IPost[]>();
  const [searchTimeout, setSearchTimeout] = useState<any>(null);

  useEffect(() => {
    const fetchPosts = async () => {
      setLoading(true);

      try {
        const response = await fetch(`${import.meta.env.VITE_API_URL}/api/v1/post`, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json'
          },
        });

        if (response.ok) {
          const result = await response.json();
          console.log(result.data.reverse());
          setAllPosts(result.data.reverse());
        }
      } catch (error) {
        console.log(error);
        alert(error);
      } finally {
        setLoading(false);
      }
    };

    fetchPosts();
  }, []);

  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    clearTimeout(searchTimeout);
    setSearchText(e.target.value);

    setSearchTimeout(
      setTimeout(() => {
        const searchResults = allPosts?.filter((item) => item.name.toLowerCase().includes(searchText) || item.prompt.toLowerCase().includes(searchText))

        setSearchedResults(searchResults);
      }, 500)
    )
  }

  return (
    <>
      <Helmet>
        <title>Home</title>
      </Helmet>
      <Layout>
        <Container>
          <Title>The community showcase</Title>
          <Group my="xl" spacing="md" grow>
            <Text>Browse through a collection of imaginative and visually stunning images generated by DALL-E AI</Text>
            <TextInput
              type="text"
              placeholder="search image by keywords..."
              value={searchText}
              icon={<IconSearch size={14}/>}
              onChange={handleSearchChange}
              disabled={loading}/>
          </Group>
          {loading ? (
            <Stack>
              <Box>
                <Skeleton height={rem(480)}/>
              </Box>
              <SimpleGrid cols={3}>
                {Array.from({length: 9}).map((_, i) => <Skeleton key={`loader-${i}`} height={rem(280)}/>)}
              </SimpleGrid>
            </Stack>
          ) : (
            <>
              {Boolean(searchText) && (
                <Group mb="md">
                  <Text size="lg" weight={500}>Showing results for: </Text>
                  <Text size="lg" weight={700}>&apos;{searchText}&apos;</Text>
                </Group>
              )}
            </>
          )}
          {!searchText &&
						<Box mb="lg">
							<Carousel mx="auto" loop controlSize={36}>
                {allPosts?.slice(0, 3).map((a, i) =>
                  <Carousel.Slide key={`hero-item-${i}`}>
                    <Box>
                      <BackgroundImage src={a.photo} radius="sm" h={rem(480)}>
                        <Center
                          sx={{
                            height: '100%',
                            alignItems: 'flex-end',
                          }}
                          px="lg"
                        >
                          <Stack
                            align="center"
                            sx={{
                              background: theme.colors.dark[9],
                              color: theme.white,
                              marginBottom: 8,
                              borderRadius: theme.radius.sm
                            }}
                            p="lg"
                            justify="space-between"
                          >
                            <Text>{a.prompt}</Text>
                            <Button
                              leftIcon={<IconDownload size={14}/>}
                              onClick={() => downloadImage(a._id, a.photo)}
                              variant="filled"
                              title="download image"
                            >
                              Download
                            </Button>
                          </Stack>
                        </Center>
                      </BackgroundImage>
                    </Box>
                  </Carousel.Slide>
                )}
							</Carousel>
						</Box>
          }
          <Box>
            {searchText
              ? <RenderCards data={searchedResults} title="No search results found"/>
              : <RenderCards data={allPosts?.slice(3, allPosts?.length - 1)} title="No posts found"/>}
          </Box>
        </Container>
      </Layout>
    </>
  );
};

export default Home;
